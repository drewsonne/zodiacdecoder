
A genetic algorithm is a global search heuristic that uses techniques inspired by simple biological evolution to find exact or approximate solutions to search and optimization problems. In order to implement a genetic algorithm, you require a genetic representation of the solution and a fitness function to evaluate the solution. Once these two things are present, you implement a genetic algorithm by generating an initial population, usually randomly, and start evolving. The evolution process consists of selection, reproduction, and mutation. Selection is used to choose which representations to keep for reproduction. Reproduction is the process of combining the representations that you kept through a method of your choosing in order to generate a new population. Mutation is the process of changing select parts of your new population in order to keep the algorithm from converging quickly by introducing some randomness. The genetic algorithm is terminated when you have achieved a satisfactory fitness level or a maximum number of iterations has been reached. If the algorithm has ended because a maximum number of iterations has been reached or it has reached the desired fitness level but has not found your solution, then you will need to check the results yourself and see if you can reach the solution through work of your own. After checking the results and you still do not have a solution, then you can allow for more iterations or increase the fitness level that you are lookng for. If it appears you are nowhere close to your solution, you should check that your fitness function is actually checking for the information you desire.

In our genetic algorithm we use an array of 63 characters as our genetic representation. Think of this array as a gene in a human and each character as a chromosone. We choose this array because there are 63 unique characters in the zodiac 340 cipher. Our fitness function is describe in the scoring section of this paper. Our implementation starts with us generating our initial population. The initial population is generated by randomly filling the 63 character array with a letter from the alphabet until we have generated enough arrays to reach our population size which is represented by NUM_KEYS in our code. Next we evaluate each array with our fitness function and assign a score to it and then we sort the arrays according to their scores. Our selection process consists of keeping a top percentage of the population. The percentage that we keep is represented by SURVIVAL_RATE in our code. Therefor the population the we keep is equal to the number of keys in our total population multiplied by the percentage we want to keep or survivingPopulation = NUM_KEYS * SURVIVAL_RATE. Our reproduction process randomly assigns a member of the surviving population to be each the mother and father. The mother and father can be the same member from the surviving population. The possibility that this happens depends on the size of the surviving population. Next it generates a new array by randomly selecting a character from the mother or father to be placed in a new array. The reproduction process continues until the new population is equal to the size of the initial population. Then the mutation that occurs on the new population is 